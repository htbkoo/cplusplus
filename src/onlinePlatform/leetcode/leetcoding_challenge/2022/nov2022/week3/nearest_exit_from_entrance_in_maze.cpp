#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <set>
#include <limits>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <iterator>
#include <sstream>
#include <iostream> // includes cin to read from stdin and cout to write to stdout
using namespace std; // since cin and cout are both in namespace std, this saves some text


class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        // TODO: validate input, e.g. what if maze is nullptr or empty; entrance is nullptr or not have 2 vaules
        height = maze.size();
        width = maze[0].size();
        _entrance = &entrance;
        _maze = &maze;
        
        int answer = 0;
        set<pair<int, int>> visited;
        queue<pair<int, int>> q;
        q.push(pair{entrance[0], entrance[1]});
        
        while (q.size() > 0) {
            int qSize = q.size();
            for (int i = 0; i < qSize; i++) {
                // auto& coords = q.front();
                auto coords = q.front();
                q.pop();

                if (isExit(coords)) {
                    return answer;
                }

                if (visited.count(coords) > 0) {
                    continue;
                }
                visited.insert(coords);

                auto& [y, x] = coords;
                for (auto& [dy, dx]: DIRECTIONS) {
                    int ny = y + dy, nx = x + dx;                
                    bool canWalk = isWithinBoundary(ny, nx) && maze[ny][nx] == EMPTY;
                    if (canWalk) {
                        q.push({ny, nx});
                    }
                }    
            }
            
            answer++;
        }
        
        int NO_PATH = -1;
        return NO_PATH;
    }
    
private:
    vector<pair<int, int>> DIRECTIONS = {
        pair{-1, 0},
        pair{1, 0},
        pair{0, -1},
        pair{0, 1}
    };
    char EMPTY = '.';
    
    int height;
    int width;  
    vector<int> *_entrance;
    vector<vector<char>> *_maze;
    
    bool isExit(pair<int, int>& coordinates) {
        auto& [y, x] = coordinates;
        
        bool isEntrance = y == (*_entrance)[0] && x == (*_entrance)[1];
        if (isEntrance) {
            // given: The entrance does not count as an exit.
            return false;
        }
        
        if (!isWithinBoundary(y, x)) {
            return false;
        }
        
        if (!((*_maze)[y][x] == EMPTY)) {
            return false;
        }
        
        bool isAtBorder = 0 == y || y == height - 1 || 0 == x || x == width - 1;
        return isAtBorder;
    }
    
    bool isWithinBoundary(int y, int x) {
        return 0 <= y && y < height && 0 <= x && x < width;
    } 
};

int main() {
    Solution soln;
    vector<vector<char>> maze = {{'+','+','.','+'},{'.','.','.','+'},{'+','+','+','.'}};
    vector<int> entrance = {1,2};
    // vector<vector<char>> maze = {{'.','+','+','.','+','+','+','.','+','+','.','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','.','+','+','.','+','+','+','+','+','.','+','+'},{'+','.','+','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','.','+','+','.','+','+','+'},{'+','.','+','+','+','.','+','+','+','.','+','+','+','+','.','+','+','+','.','.','.','+','+','+','+','+','.','+','+','+','+','+','.','+','.','+','+','+'},{'+','+','.','.','+','+','.','+','+','+','+','+','+','+','+','+','+','+','+','+','.','.','+','+','.','.','.','+','+','+','.','+','+','+','+','+','+','.'},{'+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','.','.','+','+','+','.','+','+','+','+','+','+','+','+','+','+','+','+','+','+','.'},{'+','+','+','+','+','+','+','+','+','+','+','+','+','.','+','.','.','+','+','+','.','+','+','.','+','+','+','+','+','+','+','+','+','+','+','+','+','+'},{'+','.','+','+','.','+','+','.','.','+','.','+','+','+','+','+','+','+','+','+','.','.','+','.','+','+','+','+','+','+','+','.','.','+','+','.','+','+'},{'+','+','.','+','+','+','+','+','+','.','+','+','.','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','+','+','+','.','.','+','.','+','+'},{'+','+','+','+','+','.','+','+','+','+','+','+','+','.','+','+','+','+','+','+','.','.','.','+','+','+','+','+','+','+','.','+','.','.','+','+','+','+'},{'+','.','+','+','+','+','.','+','+','+','+','+','+','+','+','+','+','+','.','.','+','.','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+'},{'+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','.','+','.','+','+','+','+','+','.'},{'+','+','+','+','+','.','.','.','+','+','+','+','+','+','.','+','+','.','+','+','+','+','+','+','+','+','+','+','+','.','+','+','.','+','.','+','+','+'},{'+','+','.','.','.','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','+','+','.','+','+','.','+','+','+','+','.','.','+','+','.','.','+'},{'.','+','+','+','+','+','.','+','.','+','+','+','+','.','+','+','+','+','+','.','+','+','+','+','+','+','+','.','+','+','+','+','+','+','.','+','+','+'},{'+','+','+','.','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','.','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','+','+','.'},{'+','+','.','.','+','+','.','+','+','+','+','.','+','+','+','+','+','+','.','+','+','+','.','+','+','+','+','+','+','+','+','+','.','+','+','+','+','+'},{'+','+','+','+','+','+','+','+','+','+','+','.','+','+','+','.','+','+','+','.','+','+','+','.','+','+','.','+','+','+','+','+','.','.','+','+','.','+'},{'+','+','+','.','+','.','+','.','+','+','.','+','+','.','.','+','+','.','+','+','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','.','+','.'},{'+','+','+','+','.','+','.','+','+','.','+','+','+','+','+','+','.','+','+','+','+','.','+','+','+','+','+','.','+','+','.','+','+','.','.','.','+','.'},{'.','+','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','.','+','+','+','+','+','.','+','+','.','.','+','+','+','.','+','+','+','+'},{'+','+','+','+','.','.','+','+','.','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','.','+','+','+','+','+','+'},{'+','+','+','+','+','.','+','+','.','+','+','+','+','.','+','+','+','+','+','+','.','+','+','+','+','+','.','+','+','+','+','.','+','+','.','+','+','+'},{'+','+','+','+','.','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','+','+','+','+','.','+','+','.'},{'.','.','+','+','+','+','.','+','+','.','+','+','+','+','.','+','.','.','.','+','+','.','+','+','+','+','.','+','+','+','+','+','.','+','+','+','+','+'},{'.','+','+','.','+','+','.','+','+','.','+','+','+','+','+','.','+','+','+','.','+','+','+','.','+','+','+','+','+','+','+','+','+','+','+','+','+','+'},{'+','+','+','+','+','+','+','+','+','+','.','.','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','.','+','.','+','+','+','+','+','+'},{'+','+','.','+','.','+','+','+','+','+','+','.','.','+','+','+','+','+','+','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','.','+','+'},{'+','+','+','.','.','+','.','+','+','+','+','+','+','+','+','+','+','.','+','+','+','.','+','+','+','+','+','+','+','+','.','.','+','+','.','.','+','+'},{'.','+','+','+','.','+','.','+','+','+','+','+','+','+','+','+','+','.','+','.','+','.','.','.','+','+','+','.','+','.','+','+','.','.','+','+','.','+'},{'.','+','+','.','+','+','+','+','.','.','.','.','+','+','.','+','+','+','+','+','.','.','.','.','.','.','.','+','.','+','+','+','+','+','+','+','+','+'},{'+','+','+','+','+','.','+','.','+','+','+','+','.','+','+','+','.','+','.','+','.','.','+','.','+','+','+','.','+','+','+','+','+','.','+','+','+','+'},{'.','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','+','+','+','.','+','.','.','+','.','+','+','+','+','+','+','+','.','+','+','+'},{'+','+','+','.','+','.','.','+','+','.','+','+','.','.','+','+','+','+','+','+','.','+','.','.','.','+','+','+','+','+','+','+','.','+','+','.','+','+'},{'+','+','+','.','+','+','+','+','+','.','+','+','+','.','+','+','+','.','.','+','+','.','.','+','.','.','+','+','+','+','+','.','.','+','+','+','+','+'},{'+','+','+','+','+','.','+','+','.','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','.','+','+','+'},{'+','.','+','+','+','+','+','+','+','+','.','.','+','+','+','+','+','+','+','+','+','+','+','+','.','.','+','+','.','+','+','+','+','+','+','+','+','.'},{'+','+','.','.','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','.','.','+','+','+','.','+','+','+','+','+','.','+','.','+','+','+','+','+'},{'+','+','+','.','+','+','+','+','.','+','+','+','+','+','+','.','+','+','+','.','.','.','+','.','.','.','+','+','+','+','+','+','+','+','+','+','+','+'},{'.','+','+','+','+','.','+','+','.','+','+','+','+','+','+','.','+','+','+','+','+','.','+','+','.','+','+','+','+','+','+','+','+','+','+','.','+','+'},{'+','+','+','+','+','.','+','+','+','+','+','.','+','+','+','.','+','+','.','.','.','+','.','+','.','+','.','.','+','+','+','+','+','+','+','+','.','+'},{'+','+','+','+','+','+','.','.','+','+','+','+','.','+','.','+','+','+','.','+','+','.','+','+','.','.','+','+','+','.','.','+','+','+','+','+','+','+'},{'.','+','+','+','+','+','+','+','.','+','+','+','+','+','+','+','+','+','.','+','.','.','+','+','.','.','+','+','.','+','+','+','+','+','+','+','.','+'},{'+','+','.','+','+','+','+','+','+','+','+','+','+','+','.','.','.','+','+','+','+','+','.','+','.','+','+','+','+','.','+','.','+','+','.','+','+','.'}};
    // vector<int> entrance      = {28,23};
    cout << soln.nearestExit(maze, entrance) << endl;
}